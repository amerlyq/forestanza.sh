#!/usr/bin/python3 -u
# Adapted from: http://xxyxyz.org/line-breaking/


def divide(idxs, width):
    offsets = [0] + idxs

    count = len(offsets) - 1
    minima = [0] + [10 ** 20] * count
    breaks = [0] * (count + 1)

    def cost(i, j):
        w = offsets[j] - offsets[i] + j - i - 1
        if w > width:
            return 10 ** 10
        return minima[i] + (width - w) ** 2

    def search(i0, j0, i1, j1):
        stack = [(i0, j0, i1, j1)]
        while stack:
            i0, j0, i1, j1 = stack.pop()
            if j0 < j1:
                j = (j0 + j1) // 2
                for i in range(i0, i1):
                    c = cost(i, j)
                    if c <= minima[j]:
                        minima[j] = c
                        breaks[j] = i
                stack.append((breaks[j], j+1, i1, j1))
                stack.append((i0, j0, breaks[j]+1, j))

    n = count + 1
    i = 0
    offset = 0

    while True:
        r = min(n, 2 ** (i + 1))
        edge = 2 ** i + offset
        search(0 + offset, edge, edge, r + offset)
        x = minima[r - 1 + offset]
        for j in range(2 ** i, r - 1):
            y = cost(j + offset, r - 1 + offset)
            if y <= x:
                n -= j
                i = 0
                offset += j
                break
        else:
            if r == n:
                break
            i = i + 1

    points = []
    j = count
    while j > 0:
        points.append(offsets[j])
        j = breaks[j]

    return reversed(points)


def reflow(width, args):
    idxs = [int(i) for i in args]
    pts = " ".join([str(i) for i in divide(idxs, width)])
    return pts

if __name__ == '__main__':
    import sys
    width = int(sys.argv[1])

    try:
        if len(sys.argv) > 2:
            print(reflow(width, sys.argv[2:]))
            sys.exit()

        for line in sys.stdin:
            print(reflow(width, line.split()))

    except KeyboardInterrupt:
        sys.stdout.flush()
